version: '3.7'


services:
  kafka:
    image: bitnami/kafka:3.4.0
    environment:
      KAFKA_NUM_PARTITIONS: 12
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_LISTENERS: CONTROLLER://:9094,CLIENT://:9092,EXTERNAL://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: CLIENT://kafka:9092,EXTERNAL://kafka:9093
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: CLIENT
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@127.0.0.1:9094
      ALLOW_PLAINTEXT_LISTENER: yes
      # BITNAMI_DEBUG: yes
    networks:
      default:
        ipv4_address: 10.5.0.3
    ports:
      - 9092:9092
    healthcheck:
      test:
        [ "CMD", "/opt/kafka/kafka_liveness.sh" ]

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    container_name: schema-registry-alluvial
    hostname: schema-registry
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_SCHEMA_COMPATIBILITY_LEVEL: NONE
    depends_on:
      - kafka
    networks:
      default:
        ipv4_address: 10.5.0.4
    ports:
      - 8081:8081

  debezium:
    image: alluvial/debezium
    build:
      context: ./debezium

    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: _debezium.configs
      OFFSET_STORAGE_TOPIC: _debezium.offsets
      STATUS_STORAGE_TOPIC: _debezium.statuses
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on:
      - kafka
    networks:
      default:
        ipv4_address: 10.5.0.5
    ports:
      - 8083:8083

  console:
    container_name: console
    image: docker.redpanda.com/vectorized/console:v2.2.3
    networks:
      default:
        ipv4_address: 10.5.0.14
    entrypoint: /bin/sh
    depends_on:
     - kafka
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://schema-registry:8081"]
        connect:
          enabled: true
          clusters:
            - name: debezium
              url: http://debezium:8083
    ports:
      - 8082:8080
  ##### MySQL #####
  # https://hub.docker.com/_/mysql
  # https://debezium.io/documentation/reference/1.8/connectors/mysql.html#setting-up-mysql
  # Help:
  # $ mysql -u root -p
  # mysql> SHOW VARIABLES LIKE '%gtid%';
  mysql:
    image: mysql:8.0
    command:
      - --gtid-mode=ON
      - --enforce_gtid_consistency=ON
      - --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: SuperSecr3t
    networks:
      default:
        ipv4_address: 10.5.0.7
    ports:
      - 3306:3306
      - 33060:33060
    volumes:
      - ./mysql/:/docker-entrypoint-initdb.d/
      - mysql_data:/var/lib/mysql

  ##### PostgreSQL #####
  # https://hub.docker.com/_/postgres
  # Help:
  # $ psql -U postgres [-W]
  # sql> SHOW wal_level;
  # sql> SELECT * FROM pg_settings;
  postgres:
    image: postgres:11-alpine
    command:
      - -c
      - wal_level=logical
      - -c
      - wal_compression=on
    environment:
      POSTGRES_PASSWORD: SuperSecr3t
    networks:
      default:
        ipv4_address: 10.5.0.8
    ports:
      - 5432:5432
    volumes:
      - ./postgres/:/docker-entrypoint-initdb.d/
      - postgres_data:/var/lib/postgresql/data

volumes:
  mysql_data:
  postgres_data:

networks:
  default:
    name: alluvial
    ipam:
      config:
        - subnet: 10.5.0.0/16
